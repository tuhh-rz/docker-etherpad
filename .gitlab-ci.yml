variables:
    CONTAINER_RELEASE_IMAGE: docker.rz.tu-harburg.de:5000/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
    LATEST_VERSION: '1.8'

.build_script_template:
  script: &build_script_definition
    - pwd
    - key="Etherpad ${VERSION}"

    - version=$(curl -s https://cgi.tu-harburg.de/~rztwww/Software/program_file.json | jq --arg KEY "$key" --raw-output '.[$KEY] | .version')
    - if [[ -z $version ]]; then exit 1; fi
    - version=$(echo $version | sed -e 's/%2B/+/g')

    - download=$(curl -s https://cgi.tu-harburg.de/~rztwww/Software/program_file.json | jq --arg KEY "$key" --raw-output '.[$KEY] | .download')
    - if [[ -z $download ]]; then exit 1; fi

    - sudo docker build --build-arg DOWNLOAD="${download}" --build-arg VERSION="${version}" --no-cache --pull -t "${CONTAINER_RELEASE_IMAGE}":"${VERSION}${VARIANT:+-$VARIANT}" "${VERSION}"/"${VARIANT}"

.build_before_script_template:
    before_script:  &build_before_script_definition
        - pwd
        - git submodule update --init --recursive

.deploy_script_template:
    script:  &deploy_script_definition
        - pwd
        - sudo docker push "${CONTAINER_RELEASE_IMAGE}":"${VERSION}${VARIANT:+-$VARIANT}"
        - if [ ! -z ${LATEST_VERSION} ] && [ "${LATEST_VERSION}" == "${VERSION}${VARIANT:+-$VARIANT}" ]; then sudo docker tag "${CONTAINER_RELEASE_IMAGE}":"${VERSION}${VARIANT:+-$VARIANT}" "${CONTAINER_RELEASE_IMAGE}:latest"; sudo docker push "${CONTAINER_RELEASE_IMAGE}:latest"; fi

.build_branches_script_template:
    script:  &build_branches_script_definition
        - pwd
        - key="Etherpad ${VERSION}"

        - version=$(curl -s https://cgi.tu-harburg.de/~rztwww/Software/program_file.json | jq --arg KEY "$key" --raw-output '.[$KEY] | .version')
        - if [[ -z $version ]]; then exit 1; fi
        - version=$(echo $version | sed -e 's/%2B/+/g')

        - download=$(curl -s https://cgi.tu-harburg.de/~rztwww/Software/program_file.json | jq --arg KEY "$key" --raw-output '.[$KEY] | .download')
        - if [[ -z $download ]]; then exit 1; fi

        - sudo docker build --build-arg DOWNLOAD="${download}" --build-arg VERSION="${version}" --no-cache --pull -t "${CONTAINER_RELEASE_IMAGE}":"${VERSION}${VARIANT:+-$VARIANT}"_"${CI_COMMIT_REF_NAME}" "${VERSION}"/"${VARIANT}"

.build_branches_before_script_template:
    before_script:  &build_branches_before_script_definition
        - pwd
        - git submodule update --init --recursive

.deploy_branches_script_template:
    script:  &deploy_branches_script_definition
        - pwd
        - sudo docker push "${CONTAINER_RELEASE_IMAGE}":"${VERSION}${VARIANT:+-$VARIANT}"_"${CI_COMMIT_REF_NAME}"

stages:
    - build
    - deploy

build:1.8:
    stage: build
    retry: 2
    rules:
        - if: '$CI_COMMIT_REF_NAME == "master"'
    tags:
        - build
    variables:
        VERSION: '1.8'
        VARIANT: ''
    before_script: *build_before_script_definition
    script: *build_script_definition

deploy:1.8:
    stage: deploy
    needs: ["build:1.8"]
    tags:
        - deploy
    rules:
        - if: '$CI_COMMIT_REF_NAME == "master"'
    variables:
        VERSION: '1.8'
        VARIANT: ''
    script: *deploy_script_definition

build:branches:1.8:
    stage: build
    retry: 2
    rules:
        - if: '$CI_COMMIT_REF_NAME != "master"'
    tags:
        - build
    variables:
        VERSION: '1.8'
        VARIANT: ''
    before_script: *build_branches_before_script_definition
    script: *build_branches_script_definition

deploy:branches:1.8:
    stage: deploy
    needs: ["build:branches:1.8"]
    tags:
        - deploy
    rules:
        - if: '$CI_COMMIT_REF_NAME != "master"'
    variables:
        VERSION: '1.8'
        VARIANT: ''
    script: *deploy_branches_script_definition
